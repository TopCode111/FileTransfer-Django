files:
  "/usr/local/bin/masterinstance_check.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/usr/bin/env bash
      METADATA=/opt/aws/bin/ec2-metadata
      INSTANCE_ID=`$METADATA -i | awk '{print $2}'`
      REGION=`$METADATA -z | awk '{print substr($2, 0, length($2)-1)}'`

      # Find our Auto Scaling Group name
      ASG=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" --region $REGION \
      --query "Tags[?Key==\`aws:autoscaling:groupName\`].Value" --output text)

      # Find the first instance in the Group
      FIRST=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names $ASG --region $REGION \
      --query "sort(AutoScalingGroups[0].Instances[?LifecycleState==\`InService\`].InstanceId)[0]" --output text)

      # Test if they're the same
      [ "$FIRST" = "$INSTANCE_ID" ]

  "/usr/local/bin/django_cron.sh":
    mode: "000755"
    owner: root
    group: root
    content: |
      #!/bin/bash
      /usr/local/bin/masterinstance_check.sh || exit
      source /opt/python/run/venv/bin/activate &&
      source /opt/python/current/env &&
      python /opt/python/current/app/manage.py crontab add

  "/etc/cron.d/custom_cron":
    mode: "000644"
    owner: root
    group: root
    content: |
      */10 * * * * root /usr/local/bin/django_cron.sh
      

commands:
  rm_old_cron:
    command: "rm -fr /etc/cron.d/*.bak"
    ignoreErrors: true